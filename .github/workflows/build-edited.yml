name: Build

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'

concurrency:
 group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
 cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # dependencies
      - name: goreleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          install-only: true

      - name: goreleaser info
        run: goreleaser -v

      - name: task
        uses: arduino/setup-task@v1

      - name: task info
        run: task --version

      # checkout
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # setup go
      - name: go
        uses: actions/setup-go@v1
        with:
          go-version: 1.19

      - name: go info
        run: |
          go version
          go env

      # cache
      - name: cache-paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: cache-build
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: cache-mod
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: cache-task
        uses: actions/cache@v4
        with:
          path: .task/**/*
          key: ${{ runner.os }}-go-task

      # vendor
      - name: vendor
        run: |
          task vendor

      # git status
      - name: git status
        run: git status

      # build
      - name: build
        if: startsWith(github.ref, 'refs/tags/') == false
        run: |
          task snapshot

      # publish
      - name: publish
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          task publish

      # artifacts
      - name: artifact_linux
        uses: actions/upload-artifact@v4
        with:
          name: build_linux
          path: dist/*linux*

  docker:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Date
        id: date
        run: echo "::set-output name=BUILD_DATE::$(date '+%Y-%m-%dT%H:%M:%S%:z')"

      - name: Version
        id: version
        run: echo "::set-output name=TAG_VERSION::$(git describe --tags --abbrev=0)"

#      - name: Publish to ghcr.io
#        uses: docker/build-push-action@v6
#        with:
#          push: true
#          context: ./dockerx64
#          platforms: linux/amd64
#          tags: |
#            ghcr.io/${{ steps.repo-name.outputs.REPO }}:${{ inputs.branch == 'master' && 'latest' || inputs.branch }}
#            ghcr.io/${{ steps.repo-name.outputs.REPO }}:v${{ inputs.version }}
#          build-args: |
#            VERSION=2.1
#            MISSARR_VERSION=${{ inputs.version }}
#            BUILD_DATE=${{ steps.date.outputs.BUILD_DATE }}
#          cache-from: type=gha
#          cache-to: type=gha,mode=max

      - name: Publish to ghcr.io
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./dockerarm64
          platforms: linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ steps.version.outputs.TAG_VERSION }}
          build-args: |
            VERSION=1.0
            MISSARR_VERSION=${{ steps.version.outputs.TAG_VERSION }}
            BUILD_DATE=${{ steps.date.outputs.BUILD_DATE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max